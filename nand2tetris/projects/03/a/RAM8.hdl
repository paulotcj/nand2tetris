// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */
 //Implementation by: Paulo Costa 2020/12

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:


    DMux8Way(in =load , sel =address , a =ld1 , b =ld2 , c =ld3 , d =ld4 , e =ld5 , f =ld6 , g =ld7 , h =ld8 );
    Register(in =in , load =ld1 , out =outR1 );
    Register(in =in , load =ld2 , out =outR2 );
    Register(in =in , load =ld3 , out =outR3 );
    Register(in =in , load =ld4 , out =outR4 );
    Register(in =in , load =ld5 , out =outR5 );
    Register(in =in , load =ld6 , out =outR6 );
    Register(in =in , load =ld7 , out =outR7 );
    Register(in =in , load =ld8 , out =outR8 );
    Mux8Way16(a =outR1 , b =outR2 , c =outR3 , d = outR4, e =outR5 , f =outR6 , g =outR7 , h =outR8 , sel =address , out = out);
}